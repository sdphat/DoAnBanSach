@page "/admin/products"
@layout AdminLayout
@using DoAnBanSach.Client.Services
@using DoAnBanSach.Shared
@inject IJSRuntime JsRuntime
@inject IProductService ProductService
@inject PriceFormatter PriceFormatter


<Modal IsOpen="@IsOpen" OnCloseModal=@(() => IsOpen = false)>
    <div class="row product-form-wrapper" style="width: 50vw;">
        @if (Mode == "edit")
        {
            <div class="row" style="margin-bottom: 16px;">
                <div class="col-6" style="font-size: 1.1rem">
                    <span style="font-size: 1.1rem; font-weight: bold;">Mã sách: </span>@Book.BookId
                </div>
                <div class="col-6" style="font-size: 1.1rem; justify-content: right; display: flex;">
                    <span style="font-size: 1.1rem; font-weight: bold;">Ngày nhập: </span>@Book.ImportDateTime.ToShortDateString()
                </div>
            </div>
        }
        <form class="row product-form">
            <div style="display: grid; place-items: center;">
                <InputFile OnChange="HandleChangeFile" id="image-input" type="file" style="display: none" />
                <label for="image-input" class="image-frame">
                    @if (Book.ImageUrl == string.Empty)
                    {
                        <div>Chọn hình</div>
                    }
                    else
                    {
                        <img src=@(Book.ImageUrl) style="height: 100%; width: 100%" />
                    }
                </label>
            </div>
            <div class="_input-group col-6">
                <div class="input-label">Tên sách</div>
                <input class="input-text" @bind="Book.Title" />
            </div>
            <div class="_input-group col-6">
                <div class="input-label">Thể loại</div>
                <input class="input-text" @bind="Book.Category.Name" />
            </div>
            <div class="_input-group col-6">
                <div class="input-label">Tác giả</div>
                <input class="input-text" @bind="Book.Author.Name" />
            </div>
            <div class="_input-group col-6">
                <div class="input-label">Nhà xuất bản</div>
                <input class="input-text" @bind="Book.Publisher.Name" />
            </div>
            <div class="_input-group col-6">
                <div class="input-label">Đơn giá</div>
                <input class="input-text" @bind="Book.Price" />
            </div>
            <div class="_input-group col-6">
                <div class="input-label">Số lượng</div>
                <input class="input-text" @bind="Book.Amount" />
            </div>
            @if (Mode == "edit")
            {
                <button @onclick="() => OnUpdate(CreateBook(Book))" @onclick:preventDefault="true" class="update-button">Cập nhật</button>
            }
            @if (Mode == "create")
            {
                <button class="create-button" @onclick="() => OnCreateBook(CreateBook(Book))" @onclick:preventDefault="true">Thêm</button>
            }
        </form>
    </div>
</Modal>

<button class="create-button" style="margin-bottom: 16px; padding: 12px 48px; font-size: 1.1rem;" @onclick="@OnOpenCreateModal">Thêm</button>
<div class="table">
    <div class="row header-row">
        <div class="col-1 row p-0">
            <div class="col-6 p-0">STT</div>
            <div class="col-6 p-0">Hình</div>
        </div>
        <div class="col-3">Tên sách</div>
        <div class="col-1">Số lượng</div>
        <div class="col-1">Đơn giá</div>
        <div class="col-1">Thể loại</div>
        <div class="col-2">Tác giả</div>
        <div class="col-2">NXB</div>
        <div class="col-1"></div>
    </div>
    <div class="content-rows-wrapper">
        @for (var i = 0; i < Books.Count; i++)
        {
            Book book = Books[i];
            <div class="row">
                <div class="col-1 row p-0">
                    <div class="col-6" style="padding: 8px">@((page-1)*itemsPerPage+i+1)</div>
                    <div class="col-6 p-0"><img style="height: 40px; width: 40px" src="@book.ImageURL" /></div>
                </div>
                <div class="col-3">@book.Title</div>
                <div class="col-1">@book.Amount</div>
                <div class="col-1">@PriceFormatter.Format(book.Price)</div>
                <div class="col-1">@book.Category.Name</div>
                <div class="col-2">@book.Author.Name</div>
                <div class="col-2">@book.Publisher.Name</div>
                <div class="col-1">
                    <i class="oi oi-eye view-icon" style="cursor: pointer;" @onclick=@(() => OnViewBook(book))></i>
                    <i class="oi oi-trash remove-icon" style="cursor: pointer;" @onclick=@(() => OnRemoveBook(book))></i>
                </div>
            </div>
        }
    </div>
    @if (maxPage > 1)
    {
        <div class="page-navigate-buttons">
            @if (page > 1)
            {
                <button class="page-navigate-button" @onclick="() => LoadPage(page - 1)"><img aria-hidden="true" src="/left_orange.png" /></button>
            }
            @if (page - pageWindow > 1)
            {
                <button @onclick="() => LoadPage(1)" class="page-navigate-button">1</button>
            }
            @if (page - pageWindow > 2)
            {
                <div style="height: 40px; display: grid; place-items: center;">...</div>
            }
            @for (var i = -pageWindow; i <= pageWindow; i++)
            {
                int p = page + i;
                if (1 <= p && p <= maxPage)
                {
                    if (p == page)
                    {
                        <button class="page-navigate-button selected">@p</button>
                    }
                    else
                    {
                        <button @onclick="() => LoadPage(p)" class="page-navigate-button">@p</button>
                    }
                }
            }

            @if (maxPage - page > pageWindow)
            {
                <div style="height: 40px; display: grid; place-items: center;">...</div>
            }
            @if (page + pageWindow < maxPage)
            {
                <button @onclick="() => LoadPage(maxPage)" class="page-navigate-button">@maxPage</button>
            }
            @if (page < maxPage)
            {
                <button class="page-navigate-button" @onclick= "() => LoadPage(page + 1)"><img aria-hidden="true" src="/right_orange.png" /></button>
            }
        </div>
    }
</div>

@code {
    public bool IsOpen { get; set; } = false;
    public string Mode { get; set; } = "create";
    public List<Book> Books { get; set; } = new();
    private BookModel Book { get; set; } = new();
    public int pageWindow = 1;
    public int page = 1;
    public int maxPage = 10;
    public int itemsPerPage;

    protected override async Task OnParametersSetAsync()
    {
        await LoadPage(1);
    }

    public void OnOpenCreateModal()
    {
        IsOpen = true;
        Mode = "create";
    }

    public void OnViewBook(Book book)
    {
        Book = new BookModel(book);
        Mode = "edit";
        IsOpen = true;
        StateHasChanged();
    }

    public async void OnRemoveBook(Book book)
    {
        var confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa?");
        if (confirm)
        {
            await ProductService.RemoveBook(book.BookId);
            Books.Remove(book);
            if (Book.BookId == book.BookId)
            {
                Book = new();
            }
            StateHasChanged();
        }
    }

    public async void OnCreateBook(Book book)
    {
        await ProductService.CreateBook(book);
        Books = Books.Append(book).ToList();
        IsOpen = false;
        StateHasChanged();
    }

    public async void OnUpdate(Book book)
    {
        await ProductService.UpdateBook(book);
        var index = Books.FindIndex(b => b.BookId == book.BookId);
        Books[index] = book;
        Book = new();
        Mode = "create";
        IsOpen = false;
        StateHasChanged();
    }

    public async void HandleChangeFile(InputFileChangeEventArgs inputFileChangeEventArgs)
    {
        var file = inputFileChangeEventArgs.File;
        var format = "image/png";
        var resizedImage = await inputFileChangeEventArgs.File.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        Book.ImageUrl = imageData;
        StateHasChanged();
    }

    public async Task LoadPage(int page)
    {
        this.page = page;
        var response = await ProductService.GetBooksAsync(page);
        itemsPerPage = response.ItemsPerPage;
        maxPage = response.Pages;
        List<BookExcerpt> bookExcerpts = response.Items;
        Books = new();
        foreach (var bookExcerpt in bookExcerpts)
        {
            var book = await ProductService.GetBook(bookExcerpt.BookId);
            Books = Books.Append(book).ToList();
        }
        StateHasChanged();

    }

    private class BookModel
    {
        public int BookId { get; set; }
        public string Title { get; set; } = string.Empty;
        public string ImageUrl { get; set; } = string.Empty;
        public Category Category { get; set; } = new();
        public Author Author { get; set; } = new();
        public Publisher Publisher { get; set; } = new();
        public decimal? Price { get; set; } = null;
        public int? Amount { get; set; } = null;
        public DateTime ImportDateTime { get; set; }

        public BookModel()
        {
            Author = new();
            Category = new();
            Publisher = new();
            ImportDateTime = DateTime.Now;
        }

        public BookModel(Book book)
        {
            BookId = book.BookId;
            Title = book.Title;
            ImageUrl = book.ImageURL;
            Category = book.Category;
            Amount = book.Amount;
            Author = book.Author;
            Publisher = book.Publisher;
            Price = book.Price;
            ImportDateTime = book.ImportDateTime;
        }
    }

    private Book CreateBook(BookModel book)
    {
        return new Book
            {
                BookId = (int)book.BookId,
                Title = book.Title,
                ImageURL = book.ImageUrl,
                Category = book.Category,
                Amount = (int)(book.Amount == null ? default(int) : book.Amount),
                Author = book.Author,
                Publisher = book.Publisher,
                Price = (decimal)(book.Price == null ? default(decimal) : book.Price),
                ImportDateTime = book.ImportDateTime
            };
    }
}
