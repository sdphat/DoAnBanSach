// <auto-generated />
using System;
using DoAnBanSach.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoAnBanSach.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220520012426_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DoAnBanSach.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6ee7f59-3294-4af7-918d-1cc6b1e92ed9",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEEGzIzwHOk6jugCQ6JrLot1GJZwPCkONMRCamYHYEZsm8GYx+z3ECJLUgdj4T953hQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e792fb52-50d6-4eb3-9f73-26684d374957",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("DoAnBanSach.Shared.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Name = "Paulo Coelho"
                        },
                        new
                        {
                            AuthorId = 2,
                            Name = "Benjamin Graham"
                        },
                        new
                        {
                            AuthorId = 3,
                            Name = "José Mauro de Vasconcelos"
                        },
                        new
                        {
                            AuthorId = 4,
                            Name = "Khotudien"
                        },
                        new
                        {
                            AuthorId = 5,
                            Name = "Nhiều tác giả"
                        },
                        new
                        {
                            AuthorId = 6,
                            Name = "Andrea Hirata"
                        },
                        new
                        {
                            AuthorId = 7,
                            Name = "Nguyễn Nhật Ánh"
                        },
                        new
                        {
                            AuthorId = 8,
                            Name = "Khaled Hosseini "
                        },
                        new
                        {
                            AuthorId = 9,
                            Name = "Johanna Spyri, Elena Selivano "
                        },
                        new
                        {
                            AuthorId = 10,
                            Name = "Shinkai Makoto "
                        });
                });

            modelBuilder.Entity("DoAnBanSach.Shared.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ImportDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Amount = 50,
                            AuthorId = 1,
                            CategoryId = 2,
                            ImageURL = "/image_195509_1_36793.jpg",
                            ImportDateTime = new DateTime(2022, 5, 19, 8, 24, 25, 535, DateTimeKind.Local).AddTicks(9795),
                            Price = 79000m,
                            PublisherId = 3,
                            Title = "Nhà Giả Kim (Tái Bản 2020)"
                        },
                        new
                        {
                            BookId = 2,
                            Amount = 52,
                            AuthorId = 3,
                            CategoryId = 1,
                            ImageURL = "/image_195509_1_21748.jpg",
                            ImportDateTime = new DateTime(2022, 5, 17, 8, 24, 25, 535, DateTimeKind.Local).AddTicks(9802),
                            Price = 91000m,
                            PublisherId = 4,
                            Title = "Cây Cam Ngọt Của Tôi"
                        },
                        new
                        {
                            BookId = 3,
                            Amount = 57,
                            AuthorId = 2,
                            CategoryId = 1,
                            ImageURL = "/image_195509_1_44030.jpg",
                            ImportDateTime = new DateTime(2022, 5, 13, 8, 24, 25, 535, DateTimeKind.Local).AddTicks(9804),
                            Price = 85000m,
                            PublisherId = 4,
                            Title = "Những người khốn khổ"
                        },
                        new
                        {
                            BookId = 4,
                            Amount = 12,
                            AuthorId = 4,
                            CategoryId = 1,
                            ImageURL = "/image_195509_1_00004.jpg",
                            ImportDateTime = new DateTime(2022, 3, 20, 8, 24, 25, 535, DateTimeKind.Local).AddTicks(9806),
                            Price = 45000m,
                            PublisherId = 2,
                            Title = "Từ Điển Tiếng Em"
                        },
                        new
                        {
                            BookId = 5,
                            Amount = 64,
                            AuthorId = 2,
                            CategoryId = 2,
                            ImageURL = "/image_195509_1_75552.jpg",
                            ImportDateTime = new DateTime(2021, 5, 12, 8, 24, 25, 535, DateTimeKind.Local).AddTicks(9810),
                            Price = 259000m,
                            PublisherId = 4,
                            Title = "Không Gia Đình"
                        },
                        new
                        {
                            BookId = 6,
                            Amount = 80,
                            AuthorId = 5,
                            CategoryId = 1,
                            ImageURL = "/image_195509_1_00006.jpg",
                            ImportDateTime = new DateTime(2022, 5, 20, 2, 24, 25, 535, DateTimeKind.Local).AddTicks(9811),
                            Price = 65000m,
                            PublisherId = 2,
                            Title = "Chuyện Kể Rằng Có Nàng Và Tôi"
                        },
                        new
                        {
                            BookId = 7,
                            Amount = 93,
                            AuthorId = 6,
                            CategoryId = 2,
                            ImageURL = "/image_195509_1_36366.jpg",
                            ImportDateTime = new DateTime(2022, 5, 19, 9, 24, 25, 535, DateTimeKind.Local).AddTicks(9813),
                            Price = 70000m,
                            PublisherId = 3,
                            Title = "Chiến binh cầu vồng"
                        },
                        new
                        {
                            BookId = 8,
                            Amount = 69,
                            AuthorId = 2,
                            CategoryId = 1,
                            ImageURL = "/image_195509_1_00008.jpg",
                            ImportDateTime = new DateTime(2022, 5, 18, 12, 24, 25, 535, DateTimeKind.Local).AddTicks(9815),
                            Price = 147000m,
                            PublisherId = 1,
                            Title = "Hai Số Phận"
                        },
                        new
                        {
                            BookId = 9,
                            Amount = 52,
                            AuthorId = 8,
                            CategoryId = 1,
                            ImageURL = "/image_195509_1_18176.jpg",
                            ImportDateTime = new DateTime(2022, 5, 17, 8, 24, 25, 535, DateTimeKind.Local).AddTicks(9816),
                            Price = 127000m,
                            PublisherId = 1,
                            Title = "Ngàn mặt trời rực rỡ (Tái bản 2019)"
                        },
                        new
                        {
                            BookId = 10,
                            Amount = 57,
                            AuthorId = 7,
                            CategoryId = 1,
                            ImageURL = "/image_195509_1_00010.jpg",
                            ImportDateTime = new DateTime(2022, 5, 13, 8, 24, 25, 535, DateTimeKind.Local).AddTicks(9818),
                            Price = 100000m,
                            PublisherId = 2,
                            Title = "Mắt Biếc"
                        },
                        new
                        {
                            BookId = 11,
                            Amount = 12,
                            AuthorId = 9,
                            CategoryId = 1,
                            ImageURL = "/image_195509_1_40336.jpg",
                            ImportDateTime = new DateTime(2022, 3, 20, 8, 24, 25, 535, DateTimeKind.Local).AddTicks(9819),
                            Price = 37900m,
                            PublisherId = 1,
                            Title = "Heidi"
                        },
                        new
                        {
                            BookId = 12,
                            Amount = 64,
                            AuthorId = 5,
                            CategoryId = 1,
                            ImageURL = "/image_195509_1_00012.jpg",
                            ImportDateTime = new DateTime(2021, 5, 12, 8, 24, 25, 535, DateTimeKind.Local).AddTicks(9821),
                            Price = 60000m,
                            PublisherId = 2,
                            Title = "Bến Xe"
                        },
                        new
                        {
                            BookId = 13,
                            Amount = 80,
                            AuthorId = 10,
                            CategoryId = 1,
                            ImageURL = "/image_195509_1_70753.jpg",
                            ImportDateTime = new DateTime(2022, 5, 20, 2, 24, 25, 535, DateTimeKind.Local).AddTicks(9823),
                            Price = 312000m,
                            PublisherId = 4,
                            Title = "Your name (Tái bản)"
                        },
                        new
                        {
                            BookId = 14,
                            Amount = 93,
                            AuthorId = 7,
                            CategoryId = 1,
                            ImageURL = "/image_195509_1_00014.jpg",
                            ImportDateTime = new DateTime(2022, 5, 19, 9, 24, 25, 535, DateTimeKind.Local).AddTicks(9824),
                            Price = 88000m,
                            PublisherId = 2,
                            Title = "Cảm Ơn Người Lớn"
                        },
                        new
                        {
                            BookId = 15,
                            Amount = 69,
                            AuthorId = 7,
                            CategoryId = 1,
                            ImageURL = "/image_195509_1_00015.jpg",
                            ImportDateTime = new DateTime(2022, 5, 18, 12, 24, 25, 535, DateTimeKind.Local).AddTicks(9826),
                            Price = 120000m,
                            PublisherId = 2,
                            Title = "Con Chim Xanh Biếc Bay Về"
                        });
                });

            modelBuilder.Entity("DoAnBanSach.Shared.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Sách trong nước"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Sách nước ngoài"
                        });
                });

            modelBuilder.Entity("DoAnBanSach.Shared.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DoAnBanSach.Shared.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("DoAnBanSach.Shared.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            Name = "NXB Văn Học"
                        },
                        new
                        {
                            PublisherId = 2,
                            Name = "NXB Kim Đồng"
                        },
                        new
                        {
                            PublisherId = 3,
                            Name = "NXB Hội Nhà Văn"
                        },
                        new
                        {
                            PublisherId = 4,
                            Name = "NXB Thế Giới"
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cus",
                            ConcurrencyStamp = "a5c40b2a-470a-4172-a9e3-5ad52e064a26",
                            Name = "Khách hàng",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "emp",
                            ConcurrencyStamp = "abe57043-6cc6-459a-805f-9b624b5eab3c",
                            Name = "Nhân viên",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin",
                            RoleId = "emp"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DoAnBanSach.Shared.Book", b =>
                {
                    b.HasOne("DoAnBanSach.Shared.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAnBanSach.Shared.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAnBanSach.Shared.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DoAnBanSach.Shared.OrderDetail", b =>
                {
                    b.HasOne("DoAnBanSach.Shared.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAnBanSach.Shared.Order", null)
                        .WithMany("Details")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DoAnBanSach.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DoAnBanSach.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoAnBanSach.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DoAnBanSach.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoAnBanSach.Shared.Order", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
